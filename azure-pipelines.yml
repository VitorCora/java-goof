# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '98f1db2d-4c60-4592-8f5d-51955594f906'
  imageRepository: 'vitorcorajavagoof'
  containerRegistry: 'azdevopsnv.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azdevopsnv20777270-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo apt update -y
          sudo apt install maven -y
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo apt install default-jdk
          java -version
          wget https://www-us.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz -P /tmp
          sudo tar xf /tmp/apache-maven-*.tar.gz -C /opt
          sudo ln -s /opt/apache-maven-3.6.0 /opt/maven
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cat > /etc/profile.d/maven.sh
          echo "export JAVA_HOME=/usr/lib/jvm/default-java" >> /etc/profile.d/maven.sh
          echo "export M2_HOME=/opt/maven" >> /etc/profile.d/maven.sh 
          echo "export MAVEN_HOME=/opt/maven" >> /etc/profile.d/maven.sh 
          echo "export PATH=${M2_HOME}/bin:${PATH}" >> /etc/profile.d/maven.sh
          sudo chmod +x /etc/profile.d/maven.sh
          source /etc/profile.d/maven.sh
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'mvn dependency:tree -DoutputType=dot --file="pom.xml'
    - task: SnykSecurityScan@1
      inputs:
        serviceConnectionEndpoint: 'Coratest'
        testType: 'app'
        monitorWhen: 'always'
        failOnIssues: true
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'VitorCorajavagoof.javagoof'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

